// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chatpackage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommunicationClient is the client API for Communication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommunicationClient interface {
	Broadcast(ctx context.Context, in *Channel, opts ...grpc.CallOption) (Communication_BroadcastClient, error)
	Publish(ctx context.Context, opts ...grpc.CallOption) (Communication_PublishClient, error)
}

type communicationClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunicationClient(cc grpc.ClientConnInterface) CommunicationClient {
	return &communicationClient{cc}
}

func (c *communicationClient) Broadcast(ctx context.Context, in *Channel, opts ...grpc.CallOption) (Communication_BroadcastClient, error) {
	stream, err := c.cc.NewStream(ctx, &Communication_ServiceDesc.Streams[0], "/chatpackage.Communication/broadcast", opts...)
	if err != nil {
		return nil, err
	}
	x := &communicationBroadcastClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Communication_BroadcastClient interface {
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type communicationBroadcastClient struct {
	grpc.ClientStream
}

func (x *communicationBroadcastClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *communicationClient) Publish(ctx context.Context, opts ...grpc.CallOption) (Communication_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &Communication_ServiceDesc.Streams[1], "/chatpackage.Communication/publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &communicationPublishClient{stream}
	return x, nil
}

type Communication_PublishClient interface {
	Send(*ChatMessage) error
	CloseAndRecv() (*MessageAck, error)
	grpc.ClientStream
}

type communicationPublishClient struct {
	grpc.ClientStream
}

func (x *communicationPublishClient) Send(m *ChatMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *communicationPublishClient) CloseAndRecv() (*MessageAck, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MessageAck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommunicationServer is the server API for Communication service.
// All implementations must embed UnimplementedCommunicationServer
// for forward compatibility
type CommunicationServer interface {
	Broadcast(*Channel, Communication_BroadcastServer) error
	Publish(Communication_PublishServer) error
	mustEmbedUnimplementedCommunicationServer()
}

// UnimplementedCommunicationServer must be embedded to have forward compatible implementations.
type UnimplementedCommunicationServer struct {
}

func (UnimplementedCommunicationServer) Broadcast(*Channel, Communication_BroadcastServer) error {
	return status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedCommunicationServer) Publish(Communication_PublishServer) error {
	return status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedCommunicationServer) mustEmbedUnimplementedCommunicationServer() {}

// UnsafeCommunicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommunicationServer will
// result in compilation errors.
type UnsafeCommunicationServer interface {
	mustEmbedUnimplementedCommunicationServer()
}

func RegisterCommunicationServer(s grpc.ServiceRegistrar, srv CommunicationServer) {
	s.RegisterService(&Communication_ServiceDesc, srv)
}

func _Communication_Broadcast_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Channel)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommunicationServer).Broadcast(m, &communicationBroadcastServer{stream})
}

type Communication_BroadcastServer interface {
	Send(*ChatMessage) error
	grpc.ServerStream
}

type communicationBroadcastServer struct {
	grpc.ServerStream
}

func (x *communicationBroadcastServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Communication_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CommunicationServer).Publish(&communicationPublishServer{stream})
}

type Communication_PublishServer interface {
	SendAndClose(*MessageAck) error
	Recv() (*ChatMessage, error)
	grpc.ServerStream
}

type communicationPublishServer struct {
	grpc.ServerStream
}

func (x *communicationPublishServer) SendAndClose(m *MessageAck) error {
	return x.ServerStream.SendMsg(m)
}

func (x *communicationPublishServer) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Communication_ServiceDesc is the grpc.ServiceDesc for Communication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Communication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatpackage.Communication",
	HandlerType: (*CommunicationServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "broadcast",
			Handler:       _Communication_Broadcast_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "publish",
			Handler:       _Communication_Publish_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "chat/chat.proto",
}
